@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Urlaubsantrag'
define view entity zmd_r_urlaubsantra
  as select from zmd_urlaubsantra
  association to parent zmd_r_employee as _Mitarbeiter on $projection.Antragsteller = _Mitarbeiter.ID
{
  key urlaubsantra_id               as AntragUuid,
      client           as client,
      @ObjectModel.text.element: ['EmployeeName']
      antragsteller    as Antragsteller,
      @ObjectModel.text.element: ['EmployeeName']
      genehmigender    as Genehmigender,
      startdatum       as Startdatum,
      enddatum         as Enddatum,
      urlaubstage      as Urlaubstage,
      kommentar        as Kommentar,
      status           as Status,

      /* Transient Data */
      _EmployeeText.Name as EmployeeName,

      /* Associations */
      _Mitarbeiter
}
managed implementation in class zmd_bp_urlaubsantra unique;
strict ( 2 );

define behavior for zmd_r_urlaubsantra alias Urlaubsantrag
persistent table zmd_urlaubsantra_a
lock master
authorization master ( instance )
//etag master <field_name>
{
  create;
  update;
  delete;

  association _urlaubsanspr { create; }

  field ( readonly, numbering : managed ) UrlaubsantraUuid;

  mapping for zmd_urlaubsantra_a corresponding
  {
    UrlaubsantragId = urlaubsantrag_id;
    Angestellter = antragssteller;
    Genehmigender = genehmigender;
    Startdatum = startdatum;
    Enddatum= enddatum;
    Urlaubstage = urlaubstage;
    Kommentar = kommentar;
    Status = status;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
  }
}

define behavior for zmd_r_urlaubsanspr alias Urlaubsanspruch
persistent table zmd_urlaubsanspr_a
lock dependent by _Urlaubsantra
authorization dependent by _Urlaubsanspr
//etag master <field_name>
{
  update;
  delete;

  association _Urlaubsanspr;

  field ( readonly, numbering : managed ) UrlaubsansprUuid;
  field ( readonly ) UrlaubsantraUuid;

  mapping for zmd_urlaubsanpr_a corresponding
  {
    BookingDate = booking_Date;
    BookingId = booking_id;
    BookingUuid = booking_uuid;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    CurrencyCode = currency_code;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    TravelUuid = Travel_uuid;
  }
}
